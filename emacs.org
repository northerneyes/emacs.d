* Theme
The most important part of configuration
** Make a frame to be theme color
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
#+END_SRC
** Zerodark theme
   #+BEGIN_SRC emacs-lisp
     (use-package zerodark-theme
       :demand t
       :config
       (progn
	 (when (window-system)
	   (load-theme 'zerodark t)
	   (setq frame-title-format '(buffer-file-name "%f" ("%b"))))))
   #+END_SRC
** Custom modeline
The reason is that default modeline is super slow due to mode-line-modified function in zerodark-setup-modeline-format
So let's use our own implementation
#+BEGIN_SRC emacs-lisp
  (defun zerodark-modeline-flycheck-status-custom ()
    "Return the status of flycheck to be displayed in the mode-line."
    (when flycheck-mode
      (let* ((text (pcase flycheck-last-status-change
		     (`finished (if flycheck-current-errors
				    (let ((count (let-alist (flycheck-count-errors flycheck-current-errors)
						   (+ (or .warning 0) (or .error 0)))))
				      (propertize (format "%s Issue%s" count (if (eq 1 count) "" "s"))
						  'face (zerodark-face-when-active 'zerodark-error-face)))
				  (propertize "No Issues"
					      'face (zerodark-face-when-active 'zerodark-ok-face))))
		     (`running     (propertize "Running"
					       'face (zerodark-face-when-active 'zerodark-warning-face)))
		     (`no-checker  (propertize "No Checker"
					       'face (zerodark-face-when-active 'zerodark-warning-face)))
		     (`not-checked "Disabled")
		     (`errored     (propertize "Error"
					       'face (zerodark-face-when-active 'zerodark-error-face)))
		     (`interrupted (propertize "Interrupted"
					       'face (zerodark-face-when-active 'zerodark-error-face)))
		     (`suspicious  ""))))
	(propertize text
		    'help-echo "Show Flycheck Errors"
		    'local-map (make-mode-line-mouse-map
				'mouse-1 #'flycheck-list-errors)))))

  (defun zerodark-setup-modeline-format-custom ()
    "Setup the mode-line format for zerodark."
    (interactive)
    (require 'flycheck)
    (require 'magit)
    (require 'all-the-icons)
    (let ((class '((class color) (min-colors 89)))
	  (light (if (true-color-p) "#ccd4e3" "#d7d7d7"))
	  (comment (if (true-color-p) "#687080" "#707070"))
	  (purple "#c678dd")
	  (mode-line (if "#1c2129" "#222222")))
      (custom-theme-set-faces
       'zerodark

       ;; Mode line faces
       `(mode-line ((,class (:background ,mode-line
					 :height 0.9
					 :foreground ,light
					 :box ,(when zerodark-use-paddings-in-mode-line
						 (list :line-width 4 :color mode-line))))))
       `(mode-line-inactive ((,class (:background ,mode-line
						  :height 0.9
						  :foreground ,comment
						  :box ,(when zerodark-use-paddings-in-mode-line
							  (list :line-width 4 :color mode-line))))))
       `(anzu-mode-line ((,class :inherit mode-line :foreground ,purple :weight bold)))
       ))
  (setq-default mode-line-format
		  `("%e"
		    " "
		    ,zerodark-modeline-ro " "
		    ,zerodark-buffer-coding
		    mode-line-frame-identification " "
		    " "
		    ,mode-line-modified
		    " "
		    ,zerodark-modeline-buffer-identification
		    ,zerodark-modeline-position
		    ,(if zerodark-theme-display-vc-status
			 zerodark-modeline-vc
		       "")
		    "  "
		    (:eval (zerodark-modeline-flycheck-status-custom))
		    "  " mode-line-modes mode-line-misc-info mode-line-end-spaces
		    ))
  )
  (when (window-system)
    (zerodark-setup-modeline-format-custom))
#+END_SRC
** Or we can use super simple modeline format from <https://www.johnhaman.org/blog/2018/01/20/a-clean-emacs-modeline/>
#+BEGIN_SRC emacs-lisp
; (setq-default mode-line-format
;         (list
;          mode-line-modified
;          " "
;          "%l"
;          " "
;          mode-line-buffer-identification
;          " "
;          '(vc-mode vc-mode)
;          ))
#+END_SRC
** Remove toolbar, menu and scroll
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Disable ringbell, ido, ibuffers, locale utf-8
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
  (setq inhibit-startup-message t)

  (defalias 'list-buffers 'ibuffer)

  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
* Minor settings
** Disable backup and auto saves
#+BEGIN_SRC emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+END_SRC
** Yes/No qustions
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** which-key, org-bullets, ace-window
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))

(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)))
#+END_SRC
** Disable program from right to left
No sane person will program from right to left, so turn this major perf
bottleneck off
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook
          (lambda ()
            (setq-local bidi-display-reordering nil)))
#+END_SRC
** Subword
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC
** Delete selection mode (copy/paste)
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC
* Terminal
Set up default behaviour for ansi-term
#+BEGIN_SRC emacs-lisp
(defvar my-term "/usr/local/bin/fish")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term)))
(ad-activate 'ansi-term)
#+END_SRC
* Search: ivy, counsel, swiper
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (
	   ("C-x b" . ivy-switch-buffer)
	   ("s-b" . ivy-switch-buffer)
	   ("C-<tab>" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))

  (use-package counsel
    :ensure t
    )

  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)
     ("C-r" . swiper)
     ("C-c C-r" . ivy-resume)
     ("M-x" . counsel-M-x))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)))
#+END_SRC
* Projects and ag search for projects
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy))

  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode))

  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-find-file)
  (define-key projectile-mode-map (kbd "s-r") 'projectile-switch-project)
  (define-key projectile-mode-map (kbd "s-f") 'projectile-ag)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (use-package ag
    :ensure t
    )
#+END_SRC
* Company autocomplete
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :init (progn
        (add-hook 'prog-mode-hook 'company-mode))
  :config
  (progn
    ;; Use Company for completion
    (bind-key [remap completion-at-point] #'company-complete company-mode-map)

    (setq company-tooltip-align-annotations t
          ;; Easy navigation to candidates with M-<n>
          company-show-numbers t)
    (setq company-dabbrev-downcase nil))
  :diminish company-mode)

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; some delay settings, fix it later
;(setq company-dabbrev-downcase 0)
;(setq company-idle-delay 0)
#+END_SRC
* Env
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+END_SRC
* Coding
** Smart paranthes
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
      :ensure t
      :diminish smartparens-mode
      :config
      (add-hook 'prog-mode-hook 'smartparens-mode))
#+END_SRC
** Keep things indented correctly
#+BEGIN_SRC emacs-lisp
;(use-package aggressive-indent
 ;     :ensure t)
#+END_SRC
** Expand parentheses for me.
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'electric-pair-mode)
#+END_SRC
** Highlight Brackets 
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC
* Flycheck
** Smart errors like eagerness from here [[https://github.com/magnars/.emacs.d/blob/master/settings/setup-flycheck.el][config]]
 #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :ensure t
     :config
     :init
     (add-hook 'typescript-mode-hook #'flycheck-mode)
     (add-hook 'typescript-mode-hook 'ge/ts-flycheck)
     (add-hook 'rjsx-mode-hook  #'flycheck-mode)
     (add-hook 'rjsx-mode-hook 'ge/js-flycheck)
     (add-hook 'flycheck-mode-hook 'jc/use-eslint-from-node-modules)
    )

;;disable jshint since we prefer eslint checking
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(javascript-jshint)))

   (defun ge/js-flycheck ()
     (setq flycheck-check-syntax-automatically '(idle-change save)))

   (defun ge/ts-flycheck ()
     (setq flycheck-check-syntax-automatically '(mode-enabled idle-change save)))

   (defun jc/use-eslint-from-node-modules ()
       "Set local eslint if available."
       (let* ((root (locate-dominating-file
		     (or (buffer-file-name) default-directory)
		     "node_modules"))
	      (eslint (and root
			   (expand-file-name "node_modules/eslint/bin/eslint.js"
					     root))))
	 (when (and eslint (file-executable-p eslint))
	   (setq-local flycheck-javascript-eslint-executable eslint))))

   (setq flycheck-check-syntax-automatically '(idle-change save))

   (defun george/adjust-flycheck-automatic-syntax-eagerness ()
     "Adjust how often we check for errors based on if there are any.
      This lets us fix any errors as quickly as possible, but in a
      clean buffer we're an order of magnitude laxer about checking."
     (setq flycheck-idle-change-delay
	   (if flycheck-current-errors 0.5 30.0)))

   ;; Each buffer gets its own idle-change-delay because of the
   ;; buffer-sensitive adjustment above.
   (make-variable-buffer-local 'flycheck-idle-change-delay)

   (add-hook 'flycheck-after-syntax-check-hook
	     'george/adjust-flycheck-automatic-syntax-eagerness)
 #+END_SRC
* Typescript
** Node env (fix it later)
#+BEGIN_SRC emacs-lisp
(setq exec-path (append exec-path '("~/.nvm/versions/node/v8.11.3/bin")))
;(setq exec-path (append exec-path '("/usr/local/bin")))
#+END_SRC
** Typescript mode
#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :ensure t
  :config
  (setq
   typescript-indent-level 2
   typescript-auto-indent-flag 0))
#+END_SRC
** TIDE
#+BEGIN_SRC emacs-lisp
  (use-package tide
    :ensure t
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
	   (typescript-mode . add-node-modules-path)
	   (typescript-mode . tide-hl-identifier-mode)
	  ))
#+END_SRC
* Javascript
** Js2-mode + rjsx + indent fix
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :defer t
    :commands js2-mode
    :init
    (progn
      (add-to-list 'interpreter-mode-alist (cons "node" 'js2-mode))
      (setq-default js2-basic-offset 2)
      (setq-default js-indent-level 2)
      (customize-set-variable 'js2-mode-show-parse-errors nil)
      (customize-set-variable 'js2-strict-missing-semi-warning nil)
      (customize-set-variable 'js2-strict-trailing-comma-warning nil)
      (customize-set-variable 'js2-strict-inconsistent-return-warning nil)))

  (use-package rjsx-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.js" . rjsx-mode)))

  (defadvice js-jsx-indent-line (after js-jsx-indent-line-after-hack activate)
    "Workaround sgml-mode and follow airbnb component style."
    (save-excursion
      (beginning-of-line)
      (if (looking-at-p "^ +\/?> *$")
	  (delete-char sgml-basic-offset))))
#+END_SRC
* Prettier
#+BEGIN_SRC emacs-lisp
    (use-package add-node-modules-path
      :ensure t)

    (use-package prettier-js
      :ensure t)

  (eval-after-load 'typescript-mode
      '(progn
	 (add-hook 'typescript-mode-hook #'add-node-modules-path)
	 (add-hook 'typescript-mode-hook #'prettier-js-mode)))

  (eval-after-load 'rjsx-mode
      '(progn
	 (add-hook 'rjsx-mode-hook #'add-node-modules-path)
	 (add-hook 'rjsx-mode-hook  #'prettier-js-mode)))

  (setq prettier-js-args '(
    "--single-quote" "true"
    "--jsx-bracket-same-line" "true"
  ))
#+END_SRC
* Magit
** [[https://github.com/magit/magit/wiki/Cheatsheet][Cheatsheet]]
#+BEGIN_SRC emacs-lisp
(use-package magit
    :ensure t
    :bind ("M-g" . magit-status))
#+END_SRC
* Mardown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :defer 1
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
* Org
** Common
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " ")
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-confirm-babel-evaluate nil)
(setq org-export-with-smart-quotes t)
(setq org-src-window-setup 'current-window)
#+END_SRC
** Org bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook(lambda () (org-bullets-mode 1))))
#+END_SRC
** Syntax highlighting for documents exported to HTML
#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t)
#+END_SRC
** Line wrapping
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
	      '(lambda ()
		 (visual-line-mode 1)))
#+END_SRC
** Easy-to-add emacs-lisp template
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** Disabled org-indent-mode because it freeze emacs
* Reload the config file
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/emacs.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* Diminish modes
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'which-key-mode)
    (diminish 'hungry-delete-mode)
    (diminish 'subword-mode)
    (diminish 'irony-mode)
    (diminish 'page-break-lines-mode)
    (diminish 'auto-revert-mode))
#+END_SRC
* Buffers
** Kill current buffer
#+BEGIN_SRC emacs-lisp
(defun kill-current-buffer ()
  "Kills the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'kill-current-buffer)

(setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
#+END_SRC
